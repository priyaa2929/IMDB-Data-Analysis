# -*- coding: utf-8 -*-
"""Golden_Task_2_IMDB_Data_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/Patricia1501/CodersCave-Internship-Data-Science/blob/main/Golden_Task_2_IMDB_Data_Analysis.ipynb

#### <b>CodersCave

### <b><u><center>Golden Task 2-IMDB Data Analysis</center></u>

Importing the necessary libraries.
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

sns.set_style('darkgrid')
matplotlib.rcParams['font.size'] = 14
matplotlib.rcParams['figure.figsize'] = (9, 5)
matplotlib.rcParams['figure.facecolor'] = '#00000000'

import warnings
warnings.filterwarnings("ignore")

from google.colab import drive
drive.mount('/content/drive')

df_movies= pd.read_csv('/content/drive/My Drive/Colab Notebooks/CodersCave Internship/Golden Task 2-IMDB Analysis/imdb_top_1000.csv')
df_movies

df_movies.head()

df_movies.tail()

df_movies.columns

df_movies.shape

df_movies.dtypes

df_movies.sample(10)

df_movies.info()

df_movies.describe()

df_movies.duplicated().sum()

df_movies.isnull().sum()

print(df_movies["Certificate"].mode())
df_movies["Certificate"].fillna(str(df_movies["Certificate"].mode().values[0]),inplace=True)

df_movies.isnull().sum()

print(df_movies["Meta_score"].mode())
df_movies["Meta_score"].fillna(str(df_movies["Meta_score"].mode().values[0]),inplace=True)

df_movies.isnull().sum()

print(df_movies["Gross"].mode())
df_movies["Gross"].fillna(str(df_movies["Gross"].mode().values[0]),inplace=True)

df_movies.isnull().sum()

df_movies.drop("Poster_Link", axis=1, inplace=True)
df_movies.head()

df_movies.drop("Star3", axis=1, inplace=True)
df_movies.drop("Star4", axis=1, inplace=True)
df_movies.drop("Overview", axis=1, inplace=True)

df_movies.isnull().sum()

df_movies.head()

df_movies["Gross"].head()

"""### <b>Exploratory Analysis and Visualization

<b>Movies</b><br>
Let us visualise the Percentage of movies released per year using Bar Graph.
"""

number_of_movies = df_movies.Released_Year.value_counts()
number_of_movies

sns.set(rc={'figure.figsize':(50,20)})
plt.title('Movies Per Year')

plt.xlabel('Year')
plt.ylabel('Number Of Movies Per Year')
plt.bar(df_movies.Released_Year.unique(), number_of_movies);

"""<b>Revenue</b><br>
Let us construct a Line Chart to get Revenue Generated Per Year.
"""

sns.set(rc={'figure.figsize':(15,5)})
revenue_per_year = df_movies.Released_Year.value_counts()

plt.title('Revenue Generated Per Year')
plt.xlabel('Year')
plt.ylabel('Revenue (Millions)')

sns.lineplot(x=df_movies['Released_Year'].unique(), y=revenue_per_year);

"""<b>Votes</b><br>
Let us see number vote partition for top 10 movies.
"""

votes_for_movies = df_movies.sort_values('IMDB_Rating', ascending=False).head(10)

votes_for_movies

print('\t\t\t\tVote Partition')

plt.figure(figsize=(20,10))

votes_for_movies.No_of_Votes.plot.pie(autopct="%.1f%%");

plt.figure(figsize=(15,9))
sns.countplot(x="Certificate", data=df_movies, color="yellow")
plt.xticks(rotation=90)
plt.show()

"""<b>Rating</b><br>
Let us classify the Movies based on Rating in the interval of 10 using Histogram.
"""

plt.title('Movies as per Rating')
plt.xlabel('Rating')
plt.ylabel('Number of Movies')

plt.hist(df_movies.IMDB_Rating, bins = range(0,11));

plt.figure(figsize=(16,8))
sns.countplot(x="Released_Year", data=df_movies, color="blue")
plt.xticks(rotation=90)
plt.show()

"""### <b>Asking and Answering Questions

To find the actors having more demand and acted in more number of movies.
"""

df_movies.Star1

def split_multicolumn(column) :
    result_df = column.to_frame()
    options = []

    for ind, value in column.items() :

        for option in value.split(',') :

            if not option in result_df :
                options.append(option)
                result_df[option] = False

            result_df.at[ind, option] = True

    return result_df[options]

all_actors_df = split_multicolumn(df_movies.Star1)
all_actors_df

top_twenty_actors = all_actors_df.sum().sort_values(ascending=False).head(20)

top_twenty_actors

plt.figure(figsize=(10,6))

plt.title('Top 20 Actors acted in most number of movies')
plt.xlabel('Number Of Movies')
plt.ylabel('Actors')
sns.barplot(x=top_twenty_actors, y=top_twenty_actors.keys());

"""Information about Top 10 movies according to Rating."""

df_movies.sort_values('IMDB_Rating', ascending=False).head(10)

"""To get information about the popular Genre."""

all_genre = split_multicolumn(df_movies.Genre)
all_genre

total_count_genre = all_genre.sum().sort_values(ascending=False)
total_count_genre

plt.figure(figsize=(10,6))

plt.title('Most Watched Genre')
plt.xlabel('Number of Movies')
plt.ylabel('Genre')

sns.barplot(x=total_count_genre, y=total_count_genre.keys());

plt.figure(figsize=(16,7))
sns.countplot(x="IMDB_Rating", data=df_movies, palette="Set3")
plt.xticks(rotation=90)
plt.title("countplot for imdb rating")
plt.show()

"""To understand people willingness to watch long content year by year and their rating variation."""

rating_df = df_movies['IMDB_Rating'].to_frame()
rating_df['Runtime'] = df_movies['Runtime']
rating_df['Released_Year'] = df_movies['Released_Year']
rating_df

"""To understand the people willingness on voting and actually generating gross to movie."""

top_ten_rated_movies = df_movies.sort_values('IMDB_Rating', ascending=False).head(10)
top_ten_rated_movies

plt.figure(figsize=(12,8))

plt.title('No_of_Votes v/s Gross')
plt.xlabel('No_of_Votes')
plt.ylabel('Gross')

sns.lineplot(x=top_ten_rated_movies.No_of_Votes, y=top_ten_rated_movies['Gross']);

"""### <b>Inferences and Conclusion</b>
This project was very much useful for Exploratory Data Analysis and understand library such as numpy, pandas, matplotlib and seaborn.

To conclude, in this project we explored the way in which data is fetched and cleaned for proper usage. Ploted few graph to understand what data represents. And few questions to understand and predict few things using data.
"""